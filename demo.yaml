asyncapi: '2.3.0'
info:
  title: TEST MQTT API
  version: '1.0.0'

servers:
  sta:
    url: test.mosquitto.org:{port}
    protocol: mqtt
    description: Test broker
    variables:
      port:
        description: Secure connection (TLS) is available through port 8883.
        default: '1883'
        enum:
          - '1883'
          - '8883'
    security:
      - apiKey: []
      - supportedOauthFlows:
        - streetlights:on
        - streetlights:off
        - streetlights:dim
      - openIdConnectWellKnown: []

defaultContentType: application/json

channels:
  '{machineType}/{machineCode}/pub/getAllowedUsers':
    description: The topic on which measured values may be produced and consumed.
    parameters:
      machineType:
        $ref: '#/components/parameters/machineType'
      machineCode:
        $ref: '#/components/parameters/machineCode'
    publish:
      summary: Inform about environmental lighting conditions of a particular streetlight.
      operationId: getAllowedUsers
      traits:
        - $ref: '#/components/operationTraits/mqtt'
      message:
        $ref: '#/components/messages/getAllowedUsers'

components:
  messages:
    getAllowedUsers:
      name: getAllowedUsers
      title: Gets list of allowed users
      contentType: application/json
      traits:
        - $ref: '#/components/messageTraits/commonHeaders'
      payload:
        $ref: "#/components/schemas/GetAllowedUsersMessage"
    test:
      name: test
      title: Gets list of allowed users
      contentType: application/json
      traits:
        - $ref: '#/components/messageTraits/commonHeaders'
      payload:
        $ref: "#/components/schemas/TEST"

  schemas:
    GetAllowedUsersMessage:
      type: object
      properties:
        machineCode:
          type: string
          description: Machine code
        id:
          type: string
          description: ID of the machine
    TEST:
      type: object
      properties:
        machineCode:
          type: string
          description: Machine code
        id:
          type: string
          description: ID of the machine

  securitySchemes:
    apiKey:
      type: apiKey
      in: user
      description: Provide your API key as the user and leave the password empty.
    supportedOauthFlows:
      type: oauth2
      description: Flows to support OAuth 2.0
      flows:
        implicit:
          authorizationUrl: 'https://authserver.example/auth'
          scopes:
            'streetlights:on': Ability to switch lights on
            'streetlights:off': Ability to switch lights off
            'streetlights:dim': Ability to dim the lights
        password:
          tokenUrl: 'https://authserver.example/token'
          scopes:
            'streetlights:on': Ability to switch lights on
            'streetlights:off': Ability to switch lights off
            'streetlights:dim': Ability to dim the lights
        clientCredentials:
          tokenUrl: 'https://authserver.example/token'
          scopes:
            'streetlights:on': Ability to switch lights on
            'streetlights:off': Ability to switch lights off
            'streetlights:dim': Ability to dim the lights
        authorizationCode:
          authorizationUrl: 'https://authserver.example/auth'
          tokenUrl: 'https://authserver.example/token'
          refreshUrl: 'https://authserver.example/refresh'
          scopes:
            'streetlights:on': Ability to switch lights on
            'streetlights:off': Ability to switch lights off
            'streetlights:dim': Ability to dim the lights
    openIdConnectWellKnown:
      type: openIdConnect
      openIdConnectUrl: 'https://authserver.example/.well-known'

  parameters:
    machineType:
      description: The ID of the streetlight.
      schema:
        $ref: "#/components/schemas/sentAt"
    machineCode:
      description: Machine code
      schema:
        type: string

  messageTraits:
    commonHeaders:
      headers:
        type: object
        properties:
          my-app-header:
            type: integer
            minimum: 0
            maximum: 100

  operationTraits:
    mqtt:
      bindings:
        mqtt:
          qos: 1
